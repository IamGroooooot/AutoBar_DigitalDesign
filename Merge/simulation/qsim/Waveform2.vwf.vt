// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2018 01:35:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bar_management_system
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bar_management_system_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK1;
reg color_input0;
reg color_input1;
reg color_input2;
reg DoorMinusBTN;
reg DoorPlusBTN;
reg DoorResetBTN;
reg expense_calculation;
reg OpenerMinusBTN;
reg OpenerPlusBTN;
reg OpenerSendBTN;
reg RandomGame_BTN;
reg seed1;
reg seed2;
reg table0;
reg table1;
reg table2;
reg table3;
reg take_order;
// wires                                               
wire Display1a;
wire Display1b;
wire Display1c;
wire Display1d;
wire Display1e;
wire Display1f;
wire Display1g;
wire Display1h;
wire Display1i;
wire Display1j;
wire Display1k;
wire Display1l;
wire Display1m;
wire Display1n;
wire Display2a;
wire Display2b;
wire Display2c;
wire Display2d;
wire Display2e;
wire Display2f;
wire Display2g;
wire Display2h;
wire Display2i;
wire Display2j;
wire Display2k;
wire Display2l;
wire Display2m;
wire Display2n;
wire DoorDisplayRemain1;
wire DoorDisplayRemain2;
wire DoorDisplayRemain3;
wire DoorDisplayRemain4;
wire NumOfOrder2POS1;
wire NumOfOrder2POS2;
wire NumOfOrder2POS3;
wire NumOfOrder2POS4;
wire OpenerDisplay1;
wire OpenerDisplay2;
wire OpenerDisplay3;
wire OpenerDisplay4;
wire Random1;
wire Random2;
wire total_price0bit;
wire total_price1bit;
wire total_price2bit;
wire total_price3bit;
wire total_price4bit;
wire total_price5bit;
wire total_price6bit;
wire total_price7bit;
wire total_price8bit;
wire total_price9bit;
wire total_priceAbit;

// assign statements (if any)                          
bar_management_system i1 (
// port map - connection between master ports and signals/registers   
	.CLK1(CLK1),
	.color_input0(color_input0),
	.color_input1(color_input1),
	.color_input2(color_input2),
	.Display1a(Display1a),
	.Display1b(Display1b),
	.Display1c(Display1c),
	.Display1d(Display1d),
	.Display1e(Display1e),
	.Display1f(Display1f),
	.Display1g(Display1g),
	.Display1h(Display1h),
	.Display1i(Display1i),
	.Display1j(Display1j),
	.Display1k(Display1k),
	.Display1l(Display1l),
	.Display1m(Display1m),
	.Display1n(Display1n),
	.Display2a(Display2a),
	.Display2b(Display2b),
	.Display2c(Display2c),
	.Display2d(Display2d),
	.Display2e(Display2e),
	.Display2f(Display2f),
	.Display2g(Display2g),
	.Display2h(Display2h),
	.Display2i(Display2i),
	.Display2j(Display2j),
	.Display2k(Display2k),
	.Display2l(Display2l),
	.Display2m(Display2m),
	.Display2n(Display2n),
	.DoorDisplayRemain1(DoorDisplayRemain1),
	.DoorDisplayRemain2(DoorDisplayRemain2),
	.DoorDisplayRemain3(DoorDisplayRemain3),
	.DoorDisplayRemain4(DoorDisplayRemain4),
	.DoorMinusBTN(DoorMinusBTN),
	.DoorPlusBTN(DoorPlusBTN),
	.DoorResetBTN(DoorResetBTN),
	.expense_calculation(expense_calculation),
	.NumOfOrder2POS1(NumOfOrder2POS1),
	.NumOfOrder2POS2(NumOfOrder2POS2),
	.NumOfOrder2POS3(NumOfOrder2POS3),
	.NumOfOrder2POS4(NumOfOrder2POS4),
	.OpenerDisplay1(OpenerDisplay1),
	.OpenerDisplay2(OpenerDisplay2),
	.OpenerDisplay3(OpenerDisplay3),
	.OpenerDisplay4(OpenerDisplay4),
	.OpenerMinusBTN(OpenerMinusBTN),
	.OpenerPlusBTN(OpenerPlusBTN),
	.OpenerSendBTN(OpenerSendBTN),
	.Random1(Random1),
	.Random2(Random2),
	.RandomGame_BTN(RandomGame_BTN),
	.seed1(seed1),
	.seed2(seed2),
	.table0(table0),
	.table1(table1),
	.table2(table2),
	.table3(table3),
	.take_order(take_order),
	.total_price0bit(total_price0bit),
	.total_price1bit(total_price1bit),
	.total_price2bit(total_price2bit),
	.total_price3bit(total_price3bit),
	.total_price4bit(total_price4bit),
	.total_price5bit(total_price5bit),
	.total_price6bit(total_price6bit),
	.total_price7bit(total_price7bit),
	.total_price8bit(total_price8bit),
	.total_price9bit(total_price9bit),
	.total_priceAbit(total_priceAbit)
);
initial 
begin 
#1000000 $finish;
end 

// CLK1
always
begin
	CLK1 = 1'b0;
	CLK1 = #5000 1'b1;
	#5000;
end 

// color_input0
initial
begin
	color_input0 = 1'b0;
	color_input0 = #230000 1'b1;
	color_input0 = #20000 1'b0;
	color_input0 = #20000 1'b1;
	color_input0 = #20000 1'b0;
	color_input0 = #50000 1'b1;
	color_input0 = #40000 1'b0;
end 

// color_input1
initial
begin
	color_input1 = 1'b0;
	color_input1 = #40000 1'b1;
	color_input1 = #70000 1'b0;
	color_input1 = #120000 1'b1;
	color_input1 = #20000 1'b0;
	color_input1 = #20000 1'b1;
	color_input1 = #20000 1'b0;
	color_input1 = #50000 1'b1;
	color_input1 = #40000 1'b0;
end 

// color_input2
initial
begin
	color_input2 = 1'b0;
	color_input2 = #40000 1'b1;
	color_input2 = #70000 1'b0;
end 

// table0
initial
begin
	table0 = 1'b0;
end 

// table1
initial
begin
	table1 = 1'b0;
	table1 = #10000 1'b1;
	table1 = #700000 1'b0;
end 

// table2
initial
begin
	table2 = 1'b0;
	table2 = #10000 1'b1;
	table2 = #700000 1'b0;
end 

// table3
initial
begin
	table3 = 1'b0;
end 

// OpenerPlusBTN
initial
begin
	OpenerPlusBTN = 1'b0;
	OpenerPlusBTN = #40000 1'b1;
	OpenerPlusBTN = #70000 1'b0;
	OpenerPlusBTN = #120000 1'b1;
	OpenerPlusBTN = #20000 1'b0;
	OpenerPlusBTN = #20000 1'b1;
	OpenerPlusBTN = #20000 1'b0;
	OpenerPlusBTN = #50000 1'b1;
	OpenerPlusBTN = #40000 1'b0;
end 

// OpenerMinusBTN
initial
begin
	OpenerMinusBTN = 1'b0;
end 

// OpenerSendBTN
initial
begin
	OpenerSendBTN = 1'b0;
	OpenerSendBTN = #150000 1'b1;
	OpenerSendBTN = #40000 1'b0;
	OpenerSendBTN = #110000 1'b1;
	OpenerSendBTN = #30000 1'b0;
	OpenerSendBTN = #90000 1'b1;
	OpenerSendBTN = #30000 1'b0;
end 

// take_order
initial
begin
	take_order = 1'b0;
	take_order = #220000 1'b1;
	take_order = #40000 1'b0;
	take_order = #240000 1'b1;
	take_order = #50000 1'b0;
	take_order = #60000 1'b1;
	take_order = #50000 1'b0;
end 

// expense_calculation
initial
begin
	expense_calculation = 1'b0;
	expense_calculation = #760000 1'b1;
	expense_calculation = #40000 1'b0;
end 
endmodule

